import { task } from 'hardhat/config';
import { TASK_COMPILE, TASK_CLEAN, TASK_TEST } from 'hardhat/builtin-tasks/task-names';
import type { HardhatRuntimeEnvironment } from 'hardhat/types';

import { poseidonContract } from 'circomlibjs';

/**
 * Overwrites build artifacts to inject generated bytecode
 *
 * @param hre - hardhat runtime environment
 * @param contractName - contract name to overwrite
 * @param bytecode - bytecode to inject
 * @returns promise for completion
 */
async function overwriteArtifact(
  hre: HardhatRuntimeEnvironment,
  contractName: string,
  bytecode: string,
): Promise<void> {
  const artifact = await hre.artifacts.readArtifact(contractName);
  artifact.bytecode = bytecode;
  await hre.artifacts.saveArtifactAndDebugFile(artifact);
}

task(TASK_COMPILE).setAction(async (taskArguments, hre, runSuper) => {
  await runSuper();
  await overwriteArtifact(
    hre,
    'contracts/poseidon.sol:PoseidonT3',
    poseidonContract.createCode(2),
  );
  await overwriteArtifact(
    hre,
    'contracts/poseidon.sol:PoseidonT4',
    poseidonContract.createCode(3),
  );
  await hre.run('abi:export');
});

task(TASK_CLEAN).setAction(async (taskArguments, hre, runSuper) => {
  await runSuper();
  await hre.run('abi:clean');
});

task(TASK_TEST, 'Runs test suite')
  .addOptionalParam(
    'longtests',
    'no = execute shorter tests; no = full test suite enabled (default: yes)',
  )
  .setAction(async (taskArguments: { longtests: string }, hre, runSuper) => {
    if (taskArguments.longtests === 'no' || taskArguments.longtests === 'yes') {
      process.env.LONG_TESTS = taskArguments.longtests;
    } else if (process.env.LONG_TESTS !== 'no') {
      process.env.LONG_TESTS = 'yes';
    }
    await runSuper();
  });
