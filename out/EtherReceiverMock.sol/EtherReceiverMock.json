{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "acceptEther",
          "type": "bool"
        }
      ],
      "name": "setAcceptEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "bytecode": {
    "object": "0x60808060405234601457609f908161001a8239f35b600080fdfe60043610156023575b3615601257600080fd5b60ff6000541615601e57005b600080fd5b6000803560e01c634fea120c14603857506008565b34606657602036600319011260665760043580151580910360625760ff8019835416911617815580f35b5080fd5b80fdfea264697066735822122048aaefb283e3baf6388559998ccb7f60dafe70e1ffc7ddacd27e652eac369d2e64736f6c63430008130033",
    "sourceMap": "58:260:92:-:0;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60043610156023575b3615601257600080fd5b60ff6000541615601e57005b600080fd5b6000803560e01c634fea120c14603857506008565b34606657602036600319011260665760043580151580910360625760ff8019835416911617815580f35b5080fd5b80fdfea264697066735822122048aaefb283e3baf6388559998ccb7f60dafe70e1ffc7ddacd27e652eac369d2e64736f6c63430008130033",
    "sourceMap": "58:260:92:-:0;;;;;;-1:-1:-1;58:260:92;;;;;;;;;263:12;58:260;;262:13;258:52;;58:260;258:52;263:12;291:8;;58:260;;;;;;;;;;;;;;;;;;;-1:-1:-1;;58:260:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "setAcceptEther(bool)": "4fea120c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"acceptEther\",\"type\":\"bool\"}],\"name\":\"setAcceptEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/.cache/openzeppelin/local/mocks/EtherReceiverMock.sol\":\"EtherReceiverMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solidstate/=lib/solidstate-solidity/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solidstate-solidity/=lib/solidstate-solidity/contracts/\"],\"viaIR\":true},\"sources\":{\"contracts/.cache/openzeppelin/local/mocks/EtherReceiverMock.sol\":{\"keccak256\":\"0x2b2eac73b765fa6205a9b1febca804b28c0eba82a2fd7f020058cbe08e93b550\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a00aadb085d43625d9dd5c001fc59693fab691c971d71f0a113f45f01427f447\",\"dweb:/ipfs/QmVkZxkBEZAiK3aYcLRjEmF2VFapJhZLKgWvMwF6AXb583\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "acceptEther",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setAcceptEther"
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@solidstate/=lib/solidstate-solidity/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts/contracts/",
        "solidstate-solidity/=lib/solidstate-solidity/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/.cache/openzeppelin/local/mocks/EtherReceiverMock.sol": "EtherReceiverMock"
      },
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/.cache/openzeppelin/local/mocks/EtherReceiverMock.sol": {
        "keccak256": "0x2b2eac73b765fa6205a9b1febca804b28c0eba82a2fd7f020058cbe08e93b550",
        "urls": [
          "bzz-raw://a00aadb085d43625d9dd5c001fc59693fab691c971d71f0a113f45f01427f447",
          "dweb:/ipfs/QmVkZxkBEZAiK3aYcLRjEmF2VFapJhZLKgWvMwF6AXb583"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/.cache/openzeppelin/local/mocks/EtherReceiverMock.sol",
    "id": 11190,
    "exportedSymbols": {
      "EtherReceiverMock": [
        11189
      ]
    },
    "nodeType": "SourceUnit",
    "src": "33:286:92",
    "nodes": [
      {
        "id": 11165,
        "nodeType": "PragmaDirective",
        "src": "33:23:92",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 11189,
        "nodeType": "ContractDefinition",
        "src": "58:260:92",
        "nodes": [
          {
            "id": 11167,
            "nodeType": "VariableDeclaration",
            "src": "91:25:92",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "_acceptEther",
            "nameLocation": "104:12:92",
            "scope": 11189,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 11166,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "91:4:92",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "private"
          },
          {
            "id": 11177,
            "nodeType": "FunctionDefinition",
            "src": "123:92:92",
            "nodes": [],
            "body": {
              "id": 11176,
              "nodeType": "Block",
              "src": "172:43:92",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 11174,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 11172,
                      "name": "_acceptEther",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11167,
                      "src": "182:12:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 11173,
                      "name": "acceptEther",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11169,
                      "src": "197:11:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "182:26:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 11175,
                  "nodeType": "ExpressionStatement",
                  "src": "182:26:92"
                }
              ]
            },
            "functionSelector": "4fea120c",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setAcceptEther",
            "nameLocation": "132:14:92",
            "parameters": {
              "id": 11170,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11169,
                  "mutability": "mutable",
                  "name": "acceptEther",
                  "nameLocation": "152:11:92",
                  "nodeType": "VariableDeclaration",
                  "scope": 11177,
                  "src": "147:16:92",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 11168,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "147:4:92",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "146:18:92"
            },
            "returnParameters": {
              "id": 11171,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "172:0:92"
            },
            "scope": 11189,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 11188,
            "nodeType": "FunctionDefinition",
            "src": "221:95:92",
            "nodes": [],
            "body": {
              "id": 11187,
              "nodeType": "Block",
              "src": "248:68:92",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "id": 11181,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "262:13:92",
                    "subExpression": {
                      "id": 11180,
                      "name": "_acceptEther",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11167,
                      "src": "263:12:92",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 11186,
                  "nodeType": "IfStatement",
                  "src": "258:52:92",
                  "trueBody": {
                    "id": 11185,
                    "nodeType": "Block",
                    "src": "277:33:92",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 11182,
                            "name": "revert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -19,
                              -19
                            ],
                            "referencedDeclaration": -19,
                            "src": "291:6:92",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 11183,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "291:8:92",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 11184,
                        "nodeType": "ExpressionStatement",
                        "src": "291:8:92"
                      }
                    ]
                  }
                }
              ]
            },
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 11178,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "228:2:92"
            },
            "returnParameters": {
              "id": 11179,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "248:0:92"
            },
            "scope": 11189,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "EtherReceiverMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          11189
        ],
        "name": "EtherReceiverMock",
        "nameLocation": "67:17:92",
        "scope": 11190,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 92
}