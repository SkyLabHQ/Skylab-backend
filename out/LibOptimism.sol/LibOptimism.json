{
  "abi": [],
  "bytecode": {
    "object": "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220d5d7cbefe678f9b56b9bc424ec2ab531ef4456ecbd996fa6cf5b0d159ed067dc64736f6c63430008130033",
    "sourceMap": "521:865:18:-:0;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x600080fdfea2646970667358221220d5d7cbefe678f9b56b9bc424ec2ab531ef4456ecbd996fa6cf5b0d159ed067dc64736f6c63430008130033",
    "sourceMap": "521:865:18:-:0;;",
    "linkReferences": {}
  },
  "methodIdentifiers": {},
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Primitives for cross-chain aware contracts for https://www.optimism.io/[Optimism]. See the https://community.optimism.io/docs/developers/bridge/messaging/#accessing-msg-sender[documentation] for the functionality used here.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/.cache/openzeppelin/local/crosschain/optimism/LibOptimism.sol\":\"LibOptimism\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@solidstate/=lib/solidstate-solidity/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solidstate-solidity/=lib/solidstate-solidity/contracts/\"],\"viaIR\":true},\"sources\":{\"contracts/.cache/openzeppelin/local/crosschain/errors.sol\":{\"keccak256\":\"0xa1e9b651a2427925598b49ef35da5930abc07859cfac5b9dfb1912f063a024b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c514518c36a3fb1c5f1a99d88857e93160c72ea1fd728c443406ad1acb43ae9a\",\"dweb:/ipfs/Qmc3oXjBNhdeM5cfWpsvewXZAhH34Scgna2W3MvLaiiapQ\"]},\"contracts/.cache/openzeppelin/local/crosschain/optimism/LibOptimism.sol\":{\"keccak256\":\"0x8003c8830d918de3ddda2aa45ecb0e529337befd36f8d2f74961f77d64ec8406\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15e3c0725e69a762665d329ef5a58403d445a54969d84ce9afa0b7ddf968b26b\",\"dweb:/ipfs/QmdsNMRhoSNZa7QFGwLg69Pi596wFoKT2KtowXsDQLwvjT\"]},\"contracts/.cache/openzeppelin/local/vendor/optimism/ICrossDomainMessenger.sol\":{\"keccak256\":\"0x20e5368804bfac0e255138e8699e415160d30efa31e1828b5677cdb85e3aa0b6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3c4c88dddb9ffcabf43cebaf8f3d54040af223eb3e6df3af6ccbad94c9d553b\",\"dweb:/ipfs/Qme2hBtwYFeJ9JCS6vTbLht3895hhrLFAZkj2mL5JVMCHU\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@solidstate/=lib/solidstate-solidity/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts/contracts/",
        "solidstate-solidity/=lib/solidstate-solidity/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/.cache/openzeppelin/local/crosschain/optimism/LibOptimism.sol": "LibOptimism"
      },
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "contracts/.cache/openzeppelin/local/crosschain/errors.sol": {
        "keccak256": "0xa1e9b651a2427925598b49ef35da5930abc07859cfac5b9dfb1912f063a024b3",
        "urls": [
          "bzz-raw://c514518c36a3fb1c5f1a99d88857e93160c72ea1fd728c443406ad1acb43ae9a",
          "dweb:/ipfs/Qmc3oXjBNhdeM5cfWpsvewXZAhH34Scgna2W3MvLaiiapQ"
        ],
        "license": "MIT"
      },
      "contracts/.cache/openzeppelin/local/crosschain/optimism/LibOptimism.sol": {
        "keccak256": "0x8003c8830d918de3ddda2aa45ecb0e529337befd36f8d2f74961f77d64ec8406",
        "urls": [
          "bzz-raw://15e3c0725e69a762665d329ef5a58403d445a54969d84ce9afa0b7ddf968b26b",
          "dweb:/ipfs/QmdsNMRhoSNZa7QFGwLg69Pi596wFoKT2KtowXsDQLwvjT"
        ],
        "license": "MIT"
      },
      "contracts/.cache/openzeppelin/local/vendor/optimism/ICrossDomainMessenger.sol": {
        "keccak256": "0x20e5368804bfac0e255138e8699e415160d30efa31e1828b5677cdb85e3aa0b6",
        "urls": [
          "bzz-raw://f3c4c88dddb9ffcabf43cebaf8f3d54040af223eb3e6df3af6ccbad94c9d553b",
          "dweb:/ipfs/Qme2hBtwYFeJ9JCS6vTbLht3895hhrLFAZkj2mL5JVMCHU"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/.cache/openzeppelin/local/crosschain/optimism/LibOptimism.sol",
    "id": 2011,
    "exportedSymbols": {
      "InvalidCrossChainSender": [
        1916
      ],
      "LibOptimism": [
        2010
      ],
      "NotCrossChainCall": [
        1910
      ],
      "Optimism_Bridge": [
        41503
      ]
    },
    "nodeType": "SourceUnit",
    "src": "119:1268:18",
    "nodes": [
      {
        "id": 1968,
        "nodeType": "PragmaDirective",
        "src": "119:23:18",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ]
      },
      {
        "id": 1970,
        "nodeType": "ImportDirective",
        "src": "144:105:18",
        "nodes": [],
        "absolutePath": "contracts/.cache/openzeppelin/local/vendor/optimism/ICrossDomainMessenger.sol",
        "file": "../../vendor/optimism/ICrossDomainMessenger.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2011,
        "sourceUnit": 41504,
        "symbolAliases": [
          {
            "foreign": {
              "id": 1969,
              "name": "ICrossDomainMessenger",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41503,
              "src": "152:21:18",
              "typeDescriptions": {}
            },
            "local": "Optimism_Bridge",
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 1971,
        "nodeType": "ImportDirective",
        "src": "250:23:18",
        "nodes": [],
        "absolutePath": "contracts/.cache/openzeppelin/local/crosschain/errors.sol",
        "file": "../errors.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 2011,
        "sourceUnit": 1917,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 2010,
        "nodeType": "ContractDefinition",
        "src": "521:865:18",
        "nodes": [
          {
            "id": 1986,
            "nodeType": "FunctionDefinition",
            "src": "687:117:18",
            "nodes": [],
            "body": {
              "id": 1985,
              "nodeType": "Block",
              "src": "757:47:18",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1983,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 1980,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "774:3:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1981,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "778:6:18",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "774:10:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 1982,
                      "name": "messenger",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1975,
                      "src": "788:9:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "774:23:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1979,
                  "id": 1984,
                  "nodeType": "Return",
                  "src": "767:30:18"
                }
              ]
            },
            "documentation": {
              "id": 1973,
              "nodeType": "StructuredDocumentation",
              "src": "547:135:18",
              "text": " @dev Returns whether the current function call is the result of a\n cross-chain message relayed by `messenger`."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isCrossChain",
            "nameLocation": "696:12:18",
            "parameters": {
              "id": 1976,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1975,
                  "mutability": "mutable",
                  "name": "messenger",
                  "nameLocation": "717:9:18",
                  "nodeType": "VariableDeclaration",
                  "scope": 1986,
                  "src": "709:17:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1974,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "709:7:18",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "708:19:18"
            },
            "returnParameters": {
              "id": 1979,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1978,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1986,
                  "src": "751:4:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1977,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "751:4:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "750:6:18"
            },
            "scope": 2010,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 2009,
            "nodeType": "FunctionDefinition",
            "src": "1167:217:18",
            "nodes": [],
            "body": {
              "id": 2008,
              "nodeType": "Block",
              "src": "1244:140:18",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "id": 1997,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "1258:24:18",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 1995,
                          "name": "messenger",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1989,
                          "src": "1272:9:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1994,
                        "name": "isCrossChain",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1986,
                        "src": "1259:12:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                          "typeString": "function (address) view returns (bool)"
                        }
                      },
                      "id": 1996,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1259:23:18",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2001,
                  "nodeType": "IfStatement",
                  "src": "1254:56:18",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1998,
                        "name": "NotCrossChainCall",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1910,
                        "src": "1291:17:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 1999,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1291:19:18",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 2000,
                    "nodeType": "RevertStatement",
                    "src": "1284:26:18"
                  }
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "arguments": [
                          {
                            "id": 2003,
                            "name": "messenger",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1989,
                            "src": "1344:9:18",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 2002,
                          "name": "Optimism_Bridge",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 41503,
                          "src": "1328:15:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_ICrossDomainMessenger_$41503_$",
                            "typeString": "type(contract ICrossDomainMessenger)"
                          }
                        },
                        "id": 2004,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1328:26:18",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ICrossDomainMessenger_$41503",
                          "typeString": "contract ICrossDomainMessenger"
                        }
                      },
                      "id": 2005,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1355:20:18",
                      "memberName": "xDomainMessageSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 41492,
                      "src": "1328:47:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                        "typeString": "function () view external returns (address)"
                      }
                    },
                    "id": 2006,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1328:49:18",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1993,
                  "id": 2007,
                  "nodeType": "Return",
                  "src": "1321:56:18"
                }
              ]
            },
            "documentation": {
              "id": 1987,
              "nodeType": "StructuredDocumentation",
              "src": "810:352:18",
              "text": " @dev Returns the address of the sender that triggered the current\n cross-chain message through `messenger`.\n NOTE: {isCrossChain} should be checked before trying to recover the\n sender, as it will revert with `NotCrossChainCall` if the current\n function call is not the result of a cross-chain message."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "crossChainSender",
            "nameLocation": "1176:16:18",
            "parameters": {
              "id": 1990,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1989,
                  "mutability": "mutable",
                  "name": "messenger",
                  "nameLocation": "1201:9:18",
                  "nodeType": "VariableDeclaration",
                  "scope": 2009,
                  "src": "1193:17:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1988,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1193:7:18",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1192:19:18"
            },
            "returnParameters": {
              "id": 1993,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1992,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 2009,
                  "src": "1235:7:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1991,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1235:7:18",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1234:9:18"
            },
            "scope": 2010,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "LibOptimism",
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 1972,
          "nodeType": "StructuredDocumentation",
          "src": "275:245:18",
          "text": " @dev Primitives for cross-chain aware contracts for https://www.optimism.io/[Optimism].\n See the https://community.optimism.io/docs/developers/bridge/messaging/#accessing-msg-sender[documentation]\n for the functionality used here."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          2010
        ],
        "name": "LibOptimism",
        "nameLocation": "529:11:18",
        "scope": 2011,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 18
}